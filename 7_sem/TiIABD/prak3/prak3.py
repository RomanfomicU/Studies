# -*- coding: utf-8 -*-
"""prak3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JD7bPFXidbMAkC7twsjcRH1C5wMeBUfu
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as sts
import seaborn as sns

"""# Задание 2"""

df = pd.read_csv('prak3/insurance.csv')
print(df.describe())

"""# Задание 3"""

fix, ax = plt.subplots(1, 4, figsize=(20, 10))
ax[0].hist(df['age'], label='age')
ax[0].legend()
ax[1].hist(df['bmi'], label='bmi')
ax[1].legend()
ax[2].hist(df['children'], label='children')
ax[2].legend()
ax[3].hist(df['charges'], label='charges')
ax[3].legend()
plt.show()

"""# Задание 4"""

bmi_mean = df['bmi'].mean()
bmi_median = df['bmi'].median()
bmi_mode = df['bmi'].mode()[0]
bmi_std = df['bmi'].std()

charges_mean = df['charges'].mean()
charges_median = df['charges'].median()
charges_mode = df['charges'].mode()[0]
charges_std = df['charges'].std()

print(f"ИMT: \n"
    f"Среднее: {bmi_mean}, \n"
    f"медиана: {bmi_median}, \n"
    f"Moдa: {bmi_mode}, \n"
    f"Стандартное отклонение: {bmi_std}\n")
print("Charges: \n"
    f"Среднее: {charges_mean}, \n"
    f"Meдиaна: {charges_median}, \n"
    f"MoДa: {charges_mode}, \n"
    f"Стандартное отклонение: {charges_std}\n")

plt.figure(figsize=(10, 5))
sns.histplot(df['bmi'], bins=15, kde=True)
plt.axvline(bmi_mean, color='red', label=f'Среднее = {bmi_mean}')
plt.axvline(bmi_median, color='green', label=f'Mедиaна {bmi_median}')
plt.axvline(bmi_mode, color='blue', label=f'Moдa = {bmi_mode}')
plt.title("ИMT")
plt.legend()
plt.show()

plt.figure(figsize=(10, 5))
sns.histplot(df['charges'], bins=15, kde=True)
plt.axvline(charges_mean, color='red', label=f'Срeднее {charges_mean}')
plt.axvline(charges_median, color='green', label=f'Meдиaнa = {charges_median}')
plt.axvline(charges_mode, color='blue', label=f'Moдa = {charges_mode}')
plt.title('Charges')
plt.legend()
plt.show()

"""# Задание 5"""

fig, axs = plt.subplots(2, 2, figsize=(10, 10))
plt.subplots_adjust(wspace=0.7, hspace=0.7)

axs[0,0].boxplot(df['age'], labels=['Boзpacт'], vert=False)
axs[0,1].boxplot(df['bmi'], labels=['Индекс массы тела'], vert=False)
axs[1,0].boxplot(df['children'], labels=['кол-во детей'], vert=False)
axs[1,1].boxplot(df['charges'], labels=['Выплaты'], vert=False)
plt.grid()
plt.show()

"""# Задание 6"""

df = pd.read_csv('prak3/insurance.csv')
feature_data = df['bmi']

sample_means = []
n_samples = 300

# Различные длины выборок
sample_sizes = [30, 50, 100, 500, 1000]
for sample_size in sample_sizes:
    means = []
    for _ in range(n_samples):
        sample = np.random.choice(feature_data, sample_size)
        means.append(np.mean(sample))
    sample_means.append(means)

fig, axs = plt.subplots(len(sample_sizes), 1, figsize=(10, 20))

for i, sample_size in enumerate(sample_sizes):
    axs[i].hist(sample_means[i], bins=30, density=True)
    axs[i].set_title(f'Sample size: {sample_size}, Mean: {np.mean (sample_means[i]):.2f}, Std Dev: {np.std(sample_means[i]):.2f}')

plt.tight_layout()
plt.show()

"""# Задание 7"""

n = len(df['bmi'])
mean = df['bmi'].mean()
stderr = df['bmi'].std() / np.sqrt(n)
margin = stderr * sts.t.ppf((1 + 0.95) / 2.0, n - 1)
print("BMI 95:", mean - margin, mean + margin)

n = len(df['charges'])
mean = df['charges'].mean()
stderr=df['charges'].std() / np.sqrt(n)
margin = stderr * sts.t.ppf((1 + 0.95) / 2.0, n - 1)
print("Charges 95:", mean - margin, mean + margin)

n = len(df['bmi'])
mean = df['bmi'].mean()
stderr = df['bmi'].std() / np.sqrt(n)
margin = stderr * sts.t.ppf((1 + 0.99) / 2.0, n - 1)
print("BMI 99:", mean - margin, mean + margin)

n = len(df['charges'])
mean = df['charges'].mean()
stderr = df['charges'].std() / np.sqrt(n)
margin = stderr * sts.t.ppf((1 + 0.99) / 2.0, n - 1)
print("Charges 99:", mean - margin, mean + margin)

"""#Задание 8"""

bmi_data = df['bmi']
charges_data = df['charges']

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sts.probplot(bmi_data, dist="norm", plot=plt)
plt.title('Q-Q график для BMІ')

plt.subplot(1, 2, 2)
ks_statistic_bmi, p_value_bmi = sts.kstest(bmi_data, 'norm')
sts.probplot(bmi_data, dist="norm", plot=plt)
plt.title(f'KS-тест для BMI (р-value={p_value_bmi:.4f})')

plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sts.probplot(charges_data, dist="norm", plot=plt)
plt.title('Q-Q график дя Charges')

plt.subplot(1, 2, 2)
ks_statistic_charges, p_value_charges = sts.kstest(charges_data, 'norm')
sts.probplot(charges_data, dist="norm", plot=plt)
plt.title(f'KS-тест для Charges (p-value={p_value_charges:.4f})')

plt.tight_layout()
plt.show()

alpha = 0.05 # Уровень значимости

if p_value_bmi < alpha:
    print("Для ВМІ: Отвергаем нулевую гипотезу. Распределение не является нормальным.")
else:
    print("Для ВМІ: Не отвергаем нулевую гипотезу. Распределение является нормальным.")

if p_value_charges < alpha:
    print("Для Charges: Отвергаем нулевую гипотезу. Распределение не является нормальным.")
else:
    print("Для Charges: Не отвергаем нулевую гипотезу. Распределение является нормальным.")

"""# Задание 9"""

data = pd.read_csv('prak3/ECDCCases.csv')

"""# Задание 10"""

missing_values = data.isnull().sum()
percentage_missing = (missing_values / len(data)) * 100
print("Пропушенные значения: " + str(missing_values))
print("Процeнт пропушенныx значений: " + str(percentage_missing))

most_missing_features = missing_values.nlargest(2).index
data.drop(columns=most_missing_features)

data['countryterritoryCode'] = data['countryterritoryCode'].fillna('other')
data['popData2019'] = data['popData2019'].fillna(data['popData2019'].median())

print("Пустыx значений нет:", data.isnull().sum().sum() == 0)

"""#Задание 11

"""

print(data.describe())
over3000 = data.loc[data['deaths'] > 3000]
print(over3000['countriesAndTerritories'].value_counts())

"""#Задание 12"""

dupl= data.duplicated()
print(f'Количество одинаковых строк: { dupl.sum()}')
data = data.drop_duplicates()
print(data)

"""# Задание 13"""

data = pd.read_csv("prak3/bmi.csv")

northwest_bmi = data[data['region'] == 'northwest']['bmi']
southwest_bmi = data[data['region'] == 'southwest']['bmi']

_, p_value_northwest = sts.shapiro(northwest_bmi)
_, p_value_southwest = sts.shapiro(southwest_bmi)

_, p_value_bartlett = sts.bartlett(northwest_bmi, southwest_bmi)

print(f"p-value (Шaпиро-Уилка) для выборки из northwest: {p_value_northwest:.4f}")
print(f"p-value (Шaпиро-Уилка) для выборки из southwest: {p_value_southwest:.4f}")
print(f"p-value (Бартлетт) для проверки гомогенности дисперсии: {p_value_bartlett:.4f}")

if p_value_northwest > 0.05 and p_value_southwest > 0.05 and p_value_bartlett > 0.05:
    t_statistic, p_value_ttest = sts.ttest_ind(northwest_bmi, southwest_bmi)
    print(f"t-статистика: {t_statistic:.4f}")
    print(f"p-value (t-критерии Стьюдента): {p_value_ttest:.4f}")

    if p_value_ttest < 0.05:
        print("Различия в средних значениях выборок статистически значимы.")
    else:
        print("Нет статистически значимых различий в средних значениях выборок.")

else:
    print("Условия для использования t-критерия Стьюдента не выполняются.")

"""# Задание 14"""

observed_frequencies = np.array([97, 98, 109, 95, 97, 104])

expected_frequencies = np.array([100] * 6)

chi2_statistic, р_value = sts.chisquare(observed_frequencies, expected_frequencies)

print(f"Значение критерия Хи-квадрат: {chi2_statistic:.2f}")
print(f"р-значение: {р_value:.4f}")

alpha = 0.05
if р_value < alpha:
    print("Отвергаем нулевую гипотезу: распределение не является равномерным.")
else:
    print("Не отвергаем нулевую гипотезу: распределение равномерное.")

"""# Задание 15"""

data = pd.DataFrame({'Женат': [89, 17, 11, 43, 22, 1],
    'Гражданский брак': [80, 22, 20, 35, 6, 4],
    'Не состоит в отношениях': [35, 44, 35, 6, 8, 22]})

data.index = ['Полный рабочий день', 'Частичная занятость', 'Временно не работает', 'На домохозяйстве', 'На пенсии', 'Учёба']

chi2_statistic, p_value, dof, expected = sts.chi2_contingency(data)

print(f"Значение критерия Хи-квадрат: {chi2_statistic:.2f}")
print(f"р-значение: {p_value:.4f}")

alpha = 0.05
if p_value < alpha:
    print("Отвергаем нулевую гипотезу: семейное положение влияет на занятость.")
else:
    print("Не отвергаем нулевую гипотезу: семейное положение не влияет на занятость.")