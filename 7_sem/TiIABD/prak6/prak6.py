# -*- coding: utf-8 -*-
"""prak6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VzP-_S6yjczFE4ix5lM7MVNHZWcXKuao
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.cluster import AgglomerativeClustering
import scipy.cluster.hierarchy as sch
from sklearn.cluster import DBSCAN

"""# Задание 1"""

data = pd.read_csv("sample_data/obesity_data.csv")

orig_labels = data['NObeyesdad'].map({'Normal_Weight': 0, 'Overweight_Level_I': 1, 'Overweight_Level_II': 2,
 'Obesity_Type_I': 3, 'Insufficient_Weight': 4, 'Obesity_Type_II': 5, 'Obesity_Type_III': 6})

data['CAEC'] = data['CAEC'].map({ 'no': 0.0, 'Sometimes': 1.0,
                                 'Frequently': 2.0, 'Always': 3.0})
data['CALC'] = data['CALC'].map({ 'no': 0.0, 'Sometimes': 1.0,
                                 'Frequently': 2.0, 'Always': 3.0})
data['Gender'] = data['Gender'].map({"Male": 0.0, "Female": 1.0})
data['MTRANS'] = data['MTRANS'].map({'Walking': 0.0, 'Bike': 1.0,
                                     'Public_Transportation': 2.0,
                                     'Automobile': 3.0, 'Motorbike': 4.0})
data['family_history_with_overweight'] = data['family_history_with_overweight'].map(
    {"yes": 1.0, "no": 0.0})
data['FAVC'] = data['FAVC'].map({"yes": 1.0, "no": 0.0})
data['SMOKE'] = data['SMOKE'].map({"yes": 1.0, "no": 0.0})
data['SCC'] = data['SCC'].map({"yes": 1.0, "no": 0.0})
data = data.drop(columns=['NObeyesdad'])

scaler = StandardScaler()
scaled_data = scaler.fit_transform(data)

tsne = TSNE(n_components=2, random_state=42)
tsne_results = tsne.fit_transform(scaled_data)

"""# Задание 2"""

inertia = []
silhouette_scores = []

for k in range(2, 11):
    kmeans = KMeans(n_clusters=k, random_state=1)
    kmeans.fit(scaled_data)
    inertia.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(scaled_data, kmeans.labels_))

plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.plot(range(2, 11), inertia, marker='o')
plt.title('Правило локтя')
plt.xlabel('Количество кластеров')
plt.ylabel('Инерция')

plt.subplot(1, 2, 2)
plt.plot(range(2, 11), silhouette_scores, marker='o')
plt.title('Коэффициент силуэта')
plt.xlabel('Количество кластеров')
plt.ylabel('Силуэт')
plt.show()

kmeans = KMeans(n_clusters=7, random_state=1)
kmeans.fit(scaled_data)

labels_km = kmeans.predict(scaled_data)

plt.figure(figsize=(6, 4))
scatter = plt.scatter(tsne_results[:, 0], tsne_results[:, 1], c=labels_km, cmap='Accent', s=15)
plt.title('Кластеры K-means')
plt.xlabel('х')
plt.ylabel('у')
plt.colorbar(scatter, label='Шкала кластеров')
plt.show()

"""# Задание 3"""

plt.figure(figsize=(10, 5))
dendrogram = sch.dendrogram(sch.linkage(scaled_data, method='ward'))
plt.title('Дендрограмма')
plt.show()

hierarchical_clustering = AgglomerativeClustering(n_clusters=7)
labels_hc = hierarchical_clustering.fit_predict(scaled_data)

plt.figure(figsize=(6, 4))
scatter = plt.scatter(tsne_results[:, 0], tsne_results[:, 1], c=labels_hc, cmap='Accent', s=15)
plt.title('Кластеры иерархической кластеризации')
plt.xlabel('х')
plt.ylabel('у')
plt.colorbar(scatter, label='Шкала кластеров')
plt.show()

"""# Задание 4"""

dbscan = DBSCAN(eps=2, min_samples=25)
dbscan.fit(scaled_data)
labels_db = dbscan.labels_

plt.figure(figsize=(6, 4))
scatter = plt.scatter(tsne_results[:, 0], tsne_results[:, 1], c=labels_db, cmap='Accent', s=15)
plt.title('Кластеры DBSCAN')
plt.xlabel('х')
plt.ylabel('у')
plt.colorbar(scatter, label='Шкала кластеров')
plt.show()

"""# Задание 5"""

plt.figure(figsize=(6, 4))
scatter = plt.scatter(tsne_results[:, 0], tsne_results[:, 1], c=orig_labels, cmap='Accent', s=15)
plt.title('Исходная классификация')
plt.xlabel('х')
plt.ylabel('у')
plt.colorbar(scatter, label='Шкала кластеров')
plt.show()