# -*- coding: utf-8 -*-
"""prak2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w7kfp8Jq0x2FKEx-knhVYMpAwSAXFXbx

# Задания 1 - 2
"""

import pandas as pd

# Загрузка данных
data = pd.read_csv('sample_data/spotify-2023.csv', encoding='latin-1')

# Вывести первые 5 строк данных
print(data.head())

# Показать общую информацию о данных, включая пропущенные значения
print(data.info())

# Проверка наличия пропущенных значений
print(data.isnull().sum())

# Предобработка данных:
data.dropna(inplace=True)

"""# Задание 3"""

import pandas as pd
import plotly.graph_objs as go

df = pd.read_csv("sample_data/spotify-2023.csv", encoding='latin-1')

print(df.info())
print(df.head())

grouped_df = df.groupby('released_year', as_index=False)['track_name'].count()
grouped_df.columns = ['year', 'count']

fig = go.Figure(
    go.Bar(
        x=grouped_df['year'],
        y=grouped_df['count'],
        marker=dict(
            color=grouped_df['count'],
            coloraxis="coloraxis"
          )
    )
)

fig.update_layout(
    title={
        'text': "Total number of tracks released by year",
        'y': 0.95,
        'x': 0.5,
        'xanchor': 'center',
        'yanchor': 'top',
        'font': dict(size=20, color='white')
    },
    xaxis={
        'title': 'Year',
        'tickangle': 315,
        'titlefont': dict(size=16, color='white'),
        'tickfont': dict(size=14, color='white')
    },
    yaxis={
        'title': 'Number of tracks',
        'titlefont': dict(size=16, color='white'),
        'tickfont': dict(size=14, color='white'),
        'gridwidth': 2,
        'gridcolor': 'ivory'
    },
    height=700,
    plot_bgcolor='rgba(0,0,0,0)',
    paper_bgcolor='rgba(0,0,0,0)',
    margin=dict(l=50, r=50, t=100, b=50)
)
fig.show()

"""# Задание 4"""

import pandas as pd
import plotly.graph_objs as go

df = pd.read_csv("sample_data/spotify-2023.csv", encoding='latin-1')
import plotly.express as px

# Группировка по нахождению в плейлистах Spotify
fat_grouped = df.groupby(['in_spotify_playlists'], as_index=False)['track_name'].count()

# Объединение всех треков с плейлистами >= 25 000
fat10_index = fat_grouped[fat_grouped['in_spotify_playlists'] >= 25000].index
print(fat10_index)

pie_df = pd.DataFrame(columns=['in_spotify_playlists', 'track_name'])

pie_df.loc[0] = ['0', fat_grouped[fat_grouped['in_spotify_playlists'] == 0]['track_name'].sum()]

for i in range(len(fat10_index)):
    in_spotify_playlists = str(fat_grouped.iloc[fat10_index[i]]['in_spotify_playlists']) + '+'
    track_name = fat_grouped.iloc[fat10_index[i]:]['track_name'].sum()

    pie_df.loc[i+1] = [in_spotify_playlists, track_name]

# Построение круговой диаграммы
fig = px.pie(
    pie_df,
    values='track_name',
    names='in_spotify_playlists',
    hole=.5,
    color='in_spotify_playlists',
    color_discrete_sequence=px.colors.sequential.RdBu,
    labels=None
)

fig.update_traces(
    textposition='inside',
    marker_line_width=2,
    marker_line_color='black'
)

fig.update_layout(
    title=dict(
        text='Число треков в зависимости от нахождения в плейлистах Spotify',
        x=0.5,
        font=dict(size=20)
    ),
    margin=dict(l=0, r=0, t=50, b=0),
    height=800
)

fig.show()

"""# Задание 5"""

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("sample_data/spotify-2023.csv", encoding='latin-1')


# Группировка по годам для подсчета числа
year_grouped = df.groupby(['released_year'], as_index=False)['track_name'].count()

# Группировка по годам и чартам
year_chart_grouped = df.groupby(['released_year', 'in_spotify_charts'], as_index=False)['track_name'].count()

# Выбор информации за последние 20 лет
years = year_grouped.iloc[-20:]['released_year']
tracks = year_grouped.iloc[-20:]['track_name']

# Подписи осей
plt.xlabel('Год')
plt.ylabel('Число треков')

# График
plt.plot(years, tracks,
         color='crimson',
         linewidth=2,
         marker='o',
         markersize=10,
         markerfacecolor='white',
         markeredgecolor='black',
         markeredgewidth=2)

# Сетка
plt.grid(True, linewidth=2, color='mistyrose')

# Отображение графика
plt.show()

"""# Задание 5.2"""

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("sample_data/spotify-2023.csv", encoding='latin-1')

# Группировка по месяцам для подсчета числа
year_grouped = df.groupby(['released_month'], as_index=False)['track_name'].count()

# Сортировка данных по месяцам
year_grouped = year_grouped.sort_values(by='released_month', key=lambda x: x.map(
    {'January': 1, 'February': 2, 'March': 3, 'April': 4, 'May': 5, 'June': 6, 'July': 7, 'August': 8,
     'September': 9, 'October': 10, 'November': 11, 'December': 12}))

month = year_grouped['released_month']
tracks = year_grouped['track_name']

# Подписи осей
plt.xlabel('Месяц')
plt.ylabel('Число треков')

# График
plt.plot(month, tracks,
         color='crimson',
         linewidth=2,
         marker='o',
         markersize=10,
         markerfacecolor='white',
         markeredgecolor='black',
         markeredgewidth=2)

# Сетка
plt.grid(True, linewidth=2, color='mistyrose')

# Отображение графика
plt.show()

"""# Задание 6"""

from sklearn import datasets
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt
import time

# Загрузка данных MNIST
t0 = time.time()
digits = datasets.load_digits()

# Применение t-SNE для визуализации данных в 2D-пространство
tsne = TSNE(n_components=2, random_state=0, perplexity=15)
digits_tsne = tsne.fit_transform(digits.data)

# Отображение в 2D-координатах
plt.figure(figsize=(10, 8))
plt.scatter(digits_tsne[:, 0], digits_tsne[:, 1], c=digits.target, cmap=plt.cm.get_cmap('jet', 10))
plt.colorbar(ticks=range(10))
plt.clim(-0.5, 9.5)
t1 = time.time()
plt.show()
print(f"Время обработки для модели 1: {t1-t0} секунд")

"""# Задание 7"""

!pip install umap-learn

import umap.umap_ as umap
from sklearn import datasets
import matplotlib.pyplot as plt

import time

# Загрузка данных MNIST
digits = datasets.load_digits()
# Параметры алгоритма
n_neighbors_list = [5, 10, 15]
min_dist_list = [0.1, 0.25, 0.5]

for n_neighbors in n_neighbors_list:
    for min_dist in min_dist_list:
        # Измерение времени работы алгоритма
        start_time = time.time()
        # Применение UMAP для визуализации данных в 2D-пространство
        reducer = umap.UMAP(n_neighbors=n_neighbors, min_dist=min_dist)
        digits_umap = reducer.fit_transform(digits.data)
        # Отображение в 2D-координатах
        plt.figure(figsize=(8, 6))
        plt.scatter(digits_umap[:, 0], digits_umap[:, 1], c=digits.target, cmap=plt.cm.get_cmap('jet', 10))
        plt.colorbar(boundaries=range(11))
        plt.clim(-0.5, 9.5)
        plt.title('n_neighbors = ' + str(n_neighbors) + ', min_dist = ' + str(min_dist))

        # Время работы алгоритма
        print('n_neighbors =', n_neighbors, ', min_dist =', min_dist,
              ', время работы: %.2f сек' % (time.time() - start_time))

        plt.show()